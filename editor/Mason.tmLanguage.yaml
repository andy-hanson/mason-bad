# [PackageDev] target_format: plist, ext: tmLanguage
name: Mason
scopeName: source.mason
fileTypes:
- mason
uuid: 857c9cc3-2862-4a05-87e7-115318008707

patterns:

- comment: A language keyword.
  name: keyword
  match: (^|\s)(use|for|case!?|else|in|out|res|_|loop!|break!|<-|←)\s

- comment: JavaScript literal
  name: support.other
  match: "`[^`]*`"

- comment: Bracket
  name: skeyword
  match: "[\\(\\[\\{\\}\\]\\)]"

- comment: Block comment
  name: comment
  begin: \s*\\\\\\
  end: \\\\\\

- comment: Single-line comment
  name: comment
  match: \s*\\.*

- comment: Empty string
  name: string
  match: \"\"

- comment: Multi-line string
  name: string
  begin: \"\n
  end: ^$ # on blank line
  patterns:
  - name: constant.character
    comment: Escaped character
    match: \\.
  - name: variable
    comment: Interpolation
    match: \{[^\}]*\}


- comment: Single-line string
  name: string
  begin: \"
  end: \"
  patterns:
  - name: constant.character
    comment: Escaped character
    match: \\.
  - name: variable
    comment: Interpolation
    match: \{[^\}]*\}


- comment: Docstring
  name: entity.other
  begin: ^\s*(doc)$
  beginCaptures:
    '1':
      name: keyword
  end: ^\s*(in|out)?$ # 'in', 'out', or blank line
  endCaptures:
    '1':
      name: keyword


- comment: \@ on its own or before a property
  name: keyword
  match: \@

- comment: Number literal
  name: constant.numeric
  match: \d+(\.\d+)?

- commment: Type appearing on its own in a case statement.
  name: support.type
  match: :\S+

- comment: Local assignment
  name: variable
  match: (([^\s:~]+)(:([^\s~]+))?(~([^\s]+))?\s)+(=)
  captures:
    '3':
      # Colon
      name: comment
    '4':
      # Type
      name: support.type
    '5':
      # Tilde
      name: comment
    '6':
      # Rename
      name: entity.other
    '7':
      # Equals
      name: comment


- comment: Dict assignment
  name: storage
  # Match and captures closely mirror those in local assignment.
  match: ([^\.]*)(\.\s)
  # This is better but *very* slow:
  #(\s?[^\s:~.]+(:([^\s~.]+))?(~([^\s.]+))?)+(\.)\s
  captures:
    '2':
      # Dot
      name: comment
    #'2':
    #  # Colon
    #  name: comment
    #'3':
    #  # Type
    #  name: support.type
    #'4':
    #  # Tilde
    #  name: comment
    #'5':
    #  # Rename
    #  name: entity.other
    #'6':
    #  # Dot
    #  name: comment


- comment: Function
  name: variable.parameter
  begin: (\|)
  beginCaptures:
    '1':
      name: local.define.dot
  end: \n
  patterns:
    - name: support.type
      match: (\:)\S+
      captures:
        '1':
          name: comment
    - name: comment
      match: \\.*
