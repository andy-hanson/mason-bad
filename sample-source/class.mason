use .types for Bool Fun
use .Bool for True False truthy?
use .dict \ for get-property set-property!
use .js-util for do exists?
use .mangle

make-inspect = |name
	|
		props =
			(Object.keys @).map @|key
				"{key}: {`_this[key]`}"

		"{name}({props.join ", "})"

make-constructor = |name members mutable short?
	assigns =
		members.map |member index
			access = case short?
				_
					mangle member
				else
					"members[\"{member}\"]"

			"this[\"{member}\"] = {access}"

	maybeFreeze = case mutable
		_
			""
		else
			"Object.freeze(this)"

	arguments = case short?
		_
			(members.map mangle).join ", "
		else
			"members"

	mangled-name = mangle name

	body = "
		return function {mangled-name}({arguments})
		\{
			if (this instanceof {name})
			\{
				{assigns.join ";\n\t\t"}
				{maybeFreeze}
			}
			else
			\{
				return new {mangled-name}({arguments})
			}
		}

	(Function body) ()


|opts
	name:String = opts.name
	super = `(opts.super == null) ? Object : opts.super`
	members = opts.members
	instance = opts.instance
	static = opts.static

	ctr = null
	proto = Object.create super.prototype
	construct = opts.construct

	case construct
		exists? _
			\ If it has a constructor, it is a concrete class.

			member-keys:Array[String] = Object.keys opts.members
			mutable:Bool = truthy? opts.mutable

			case construct
				= "short"
					ctr := make-constructor name member-keys mutable True

				= "from-dict"
					ctr := make-constructor name member-keys mutable False

				:Function
					ctr := |
						`(this instanceof ctr) ? construct.apply(this, arguments) : new (ctr.bind(ctr, arguments))`

				else
					`throw new Error("Bad construct for " + name + ": " + construct)`
					()

			inspector = make-inspect name
			proto.toString = inspector
			proto.inspect = inspector


			member-keys.forEach |member
				dict.set! ctr "get-{member}" |instance
					dict.get instance member

				case mutable
					_
						dict.set! ctr "set-{member}!" |instance value
							dict.set! instance member value
					else
						()

		else
			\ If it has no constructor, it is not a concrete class.

			factory = opts.factory
			ctr := case factory
				exists? _
					_
				else
					make-ctr = Function "
						return function {mangle name}()
						\{
							throw new Error("Tried to construct abstract class {name}")
						}

					do make-ctr



	ctr.prototype = proto


	case static
		:Fun \ TODO: [Type -> Dict]
			statics = static ctr
			dict.extend! ctr statics
		\ TODO: not exists
		else
			()

	ctr

