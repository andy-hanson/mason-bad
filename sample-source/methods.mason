use .types for Any Fun Void ?
use .mangle

make-dispatcher = |name:String
	mangled = mangle name

	make-it-code = "
		return function {mangled}()
		\{
			var implementation =
				arguments[0]['{name}'];
			if (implementation == null)
				throw new Error("Method `{name}` not implemented for " + arguments[0])
			implementation.apply(null, arguments);
		}

	(Fun make-it-code) ()

make-checked-dispatcher = |name:String checker:Fun
	mangled = mangle name

	make-it-code = "
		console.log(checker);
		return function {mangled}()
		\{
			var implementation =
				arguments[0]['{name}'];
			if (implementation == null)
				throw new Error("Method `{name}` not implemented for " + arguments[0]);
			function impl()
			\{
				return implementation.apply(null, arguments);
			}
			return checker.apply(null, [impl].concat(arguments));
		}

	(Fun "checker" make-it-code) checker

method. |opts
	name:String = opts.name

	theMethod =
		case opts.check
			:Fun
				make-checked-dispatcher name opts.check
			:Void
				make-dispatcher name

	theMethod.method-name = name

	case opts.default
		:Any
			implement theMethod Object _
		else
			()

	theMethod

implement. |method:Fun type:Fun implementation:Fun
	name:String = method.method-name
	`type.prototype[name]` = implementation
