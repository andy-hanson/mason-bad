use .types for Fun

? =
	\ Must use Function constructor because writing `|a` generates an existence assertion!
	exists?. Function "a" "return a != null"

	subsumes?. Function "return true"

	!subsumes. Function ""

	sub. |type
		subsumes?. |a:?
			case a
				exists? _
					type.subsumes? a
				else
					`true`

		!subsumes. |a:? name
			case a
				exists? _
					type.!subsumes a name
				else
					()

	force. |a:?
		get-or a |
			fail somehow

	get-or. |a:? fall-back:Fun
		case a
			exists? _
				_
			else
				do fall-back

?
